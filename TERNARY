"Perhaps the prettiest number system of all is the balanced ternary notation" - Donald E. Knuth, The Art of Computer Programming, Vol. 2.

Most people know that computers store data using the binary number system. One of the main reasons for this can be found in the circuitry of modern computers, which are made up of billions of tiny transistors that can be either *on* (1) or *off* (0).

Such a design is so ubiquitous nowadays that it's hard to imagine that computers could operate in any other way. But, in Soviet Russia during the 1950s, they did. Enter *Setun*, a balanced ternary computer developed in 1958 by a small team led by Nikolay Brusentsov at the Moscow State University.

Ok, so before we continue talking any more about Brusentsov and Setun, let me explain a little bit about balanced ternary.

## Balanced Ternary

Ternary, or base-3, is a number system in which there are *three* possible values. In balanced ternary, these three possibilities are *-1*, *0* and *+1*; these values are often simplified to simply *-*, *0* and *+*, respectively. So we can think of the values as being "balanced" around the mid-point of 0. The same rules apply to ternary as to any other numeral system: The right-most symbol, *R*, has it's own value and each successive symbol has it's value multiplied by the base, *B*, raised to the power of it's distance, *D* from *R*. Uhh, right, maybe I'll just give you an example:

+++-0 = (1 * 3^4) + (1 * 3^3) + (1 * 3^2) + (-1 * 3^1) + 0
      = 81 + 27 + 9 + -3
      = 114

And in binary (base-2):

1110010 = (1 * 2^6) + (1 * 2^5) + (1 * 2^4) + 0 + 0 + (1 * 2^1) + 0
        = 64 + 32 + 16 + 2
        = 114

And, just to be sure, here are the same rules applied in decimal (base-10):

114 = (1 * 10^2) + (1 * 10^1) + 4
    = 100 + 10 + 4
    = 114

Ok, cool. And what if we wanted to represent -114? Well in binary and decimal we need to introduce a new symbol, the sign. In a binary computers memory, this would translate to storing a leading bit that would specify the sign. This is the reason we speak about signed and unsigned integers in programming languages.

But in balanced ternary, as we're about to discover, to represent the inverse of a number we simply have to swap all *+*'s with *-*'s and vice versa. We don't need an extra "bit" of information to represent the sign! Check it out:

---+0 = (-1 * 3^4) + (-1 * 3^3) + (-1 * 3^2) + (1 * 3^1) + 0
      = -81 + -27 + -9 + 3
      = -114

In a moment we will see that this property (and a couple others) of ternary give us some very interesting computational efficiencies, but for now let's go back to talking about the Setun computer.

## The Birth of Setun

The late 50's were an exciting time in computers: Nathaniel Rochester and his team at IBM had recently developed the first mass-produced, stored-program (a.k.a "modern") computer - the IBM 701. John Backus and his team had invented FORTRAN, the first high-level programming language that was seeing widespread use. And, perhaps most important of all, the first fully-transistorized computers, such as the TX-0 and the Philco Transac S-2000, were starting to be developed. The path was set for the development of the binary computing machines that have dominated the market ever since.

But that was America. At the same time in Russia, a group of mathematicians and engineers under the guidance of Nikolay Brusentsov and his colleague Sergei Sobolev were devising different ways in which computers could operate. Brusentsov and co. surveyed the array of computers and technological advancements emerging from the West and comprehended their use of transistors to represent binary data. But this was Russia - transistors were not readily available behind the Iron Curtain. And vacuum tubes sucked as much in Russia as they did in the West! So Brusentsov devised an element from miniature ferrite cores and semiconductor diodes that was able to act as a controlled current transformer, which proved to be an effective base for implementing ternary logic. It was found that these elements, compared with their binary counterparts, provided more speed and reliability and required less power to operate.

The team of ten literally built Setun from scratch, working in a small room filled with laboratory tables (which they also built!). Every morning, the team members began their day by assembling five basic machine elements. They started with a territe core and, using an ordinary sewing needle, wound 52 coils of wire onto it. The core was then handed off to technicians who completed the assembly process and mounted them onto blocks. Ternary logic was implemented by combining two of these territe elements and wiring them in such a way that they could represent three stable states. This approach was successful but did nothing to reduce the number of elements as, in reality, those two territe cores could potentially represent two bits, which represents more information (2^2) than one ternary "trit" (3^1).

Overall, development of Setun lasted two years - although it was operational after just ten days of testing, which was unheard of at the time. In total, only about 50 machines were produced. And even though Setun machines proved capable of operating successfully for years-on-end in Russia's extreme climate, the entire project was racked with controversy. This was primarily due to the fact the machine was so cheap to produce that the manufacturing plant could not justify it's mass-production. Eventually the machines were replaced with binary counterparts that were able to calculate with similar efficiency but at more than twice the cost of operation!

## But why Ternary?

As I demonstrated briefly above, in Ternary, there is no need to store a leading bit, ahem "trit", to indicate sign. Therefore, there is no concept of "signed" or "unsigned" integers - everything is just an integer. So subtraction is achieved by simply inverting the operand and applying addition (which is implemented similarly to binary machines). This plus-minus consistency is also able to cut down on the number of carries required in multiplication operations. And yet another useful trait of balanced ternary (or any balanced numeral system for that matter!) is the fact that one can implement rounding on floating-point numbers by blatant truncation, which allows for a simplified implementation of division. This is because of the way balanced ternary represents the fractional portion of real numbers.

To encode 0.2:

0.+--+ = 0 + (1 * (3^-1)) + (-1 * (3^-2)) + (-1 * (3^-3)) + (1 * (3^-4))
       = (1 * (3^-1)) + (-1 * (3^-2)) + (-1 * (3^-3)) + (1 * (3^-4))
       = 0.33 + -0.11 + -0.03 + 0.01
       = 0.2

And to encode 0.8 we must start with a 1 in the most significant digit and then simply inverse the fractional portion (e.g 1 + -0.2):

1.-++- = 1 + (-1 * (3^-1)) + (1 * (3^-2)) + (1 * (3^-3)) + (-1 * (3^-4))
       = 1 + (-1 * (3^-1)) + (1 * (3^-2)) + (1 * (3^-3)) + (-1 * (3^-4))
       = 1 + -0.33 + 0.11 + 0.03 + -0.01
       = 0.8

Above we can see that truncating the trits to the right of the radix point is equivalent to rounding: 0.2 becomes 0 whereas 0.8 becomes 1. Cool!

## Programming with trits and trytes!

Ok, back to Setun one last time. In the late 60's, Brusentsov developed a more modern machine called "Setun-70" that embodied it's ternarity more directly. The "Tryte" was introduced, which accounted for 6 trits (roughly 9.5 bits). The Setun-70 computer was a stack machine, and so rather than having machine instructions that specifically named registers for input and output, all operations worked on two pushdown stacks - one for operands (input) and one for return values (output). In order to accommodate this design, commands were written in reverse Polish notation (a.k.a postfix).

In the late 70's, Brusentsov and some of his students developed a programming language for the Setun-70 computer called the Dialog System for Structured Programming (DSSP). Reference material for DSSP in English is not widely available but I have been able to discover that it is a stack-based language (no surprise there) similar to Forth that uses reverse Polish notation. This allows one to write programs in a relatively high-level language yet still feel "close to the metal".

Take the following DSSP program, which sums a bunch of numbers:

1 2 3 4  DEEP 1- DO +

Let's break it down. In the first column we have the instruction, in the second we have the machine state after execution (the operand stack), and in the third I've provided an explanation:

1    [1]            Push 1 to the stack
2    [2 1]          Push 2 to the stack
3    [3 2 1]        Push 3 to the stack
4    [4 3 2 1]      Push 4 to the stack
DEEP [4 4 3 2 1]    Push "the depth of the stack" (4) to the stack
1-   [-1 4 4 3 2 1] Push -1 to the stack
DO   [4 3 2 1]      Initiate LOOP, pop first two items from stack. To control the loop, the first item is applied to the second item until it reaches 0.
+    []             Apply the "+" operation repeatedly until the LOOP terminates, each time popping the top item from the stack.

At the end of execution, the operand stack will be empty and the return stack will contain [10].
